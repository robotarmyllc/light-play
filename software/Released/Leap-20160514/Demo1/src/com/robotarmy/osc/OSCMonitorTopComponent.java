/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.robotarmy.osc;

import com.illposed.osc.OSCListener;
import com.illposed.osc.OSCMessage;
import com.illposed.osc.OSCPortIn;
import java.net.SocketException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.robotarmy.osc//OSCMonitor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "OSCMonitorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.robotarmy.osc.OSCMonitorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_OSCMonitorAction",
        preferredID = "OSCMonitorTopComponent"
)
@Messages({
    "CTL_OSCMonitorAction=OSCMonitor",
    "CTL_OSCMonitorTopComponent=OSCMonitor Window",
    "HINT_OSCMonitorTopComponent=This is a OSCMonitor window"
})
public final class OSCMonitorTopComponent extends TopComponent {
    Logger log = Logger.getLogger("OSCTopComponent");

    private OSCPortIn osc;
    
    
    public OSCMonitorTopComponent() {
        initComponents();
        setName(Bundle.CTL_OSCMonitorTopComponent());
        setToolTipText(Bundle.HINT_OSCMonitorTopComponent());
        
        try {
            addOSCListener();
        } catch (SocketException ex) {
            Exceptions.printStackTrace(ex);
        }

    }

    private void addOSCListener() throws SocketException {
        log.log(Level.SEVERE, "OSC starting");
        osc = new OSCPortIn(8000);
        OSCListener listener = new OSCListener() {
            @Override
            public void acceptMessage(Date time, OSCMessage message) {
                //log.log(Level.SEVERE, "Message received:  {0}", new Object[]{message.getAddress(), time});
                System.out.println("Message received!" + ": "+ message.getAddress() + " == " + message.getArguments() );
            }
        };
        osc.addListener("/*", listener);
        osc.addListener("/*/*", listener);
        osc.startListening();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
