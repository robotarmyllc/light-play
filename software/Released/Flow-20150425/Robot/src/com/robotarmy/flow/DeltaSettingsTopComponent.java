/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.robotarmy.flow;

import com.robotarmy.dmx.DmxChangeListener;
import com.robotarmy.dmx.DmxChannelEvent;
import com.robotarmy.dmx.DmxElement;
import com.robotarmy.dmx.Universe;
import com.robotarmy.flow.node.FlowNode;
import com.robotarmy.flow.widget.DeltaWidgetPanel;
import com.robotarmy.flow.widget.HeadingPanel;
import com.robotarmy.flow.widget.RGBPanel;
import java.util.Collection;
import java.util.Iterator;
import javax.swing.Box;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.robotarmy.flow//DeltaSettings//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "DeltaSettingsTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "properties", openAtStartup = false /*true*/)
@ActionID(category = "Window", id = "com.robotarmy.flow.DeltaSettingsTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_DeltaSettingsAction",
        preferredID = "DeltaSettingsTopComponent"
)
@Messages({
    "CTL_DeltaSettingsAction=DeltaSettings",
    "CTL_DeltaSettingsTopComponent=DeltaSettings Window",
    "HINT_DeltaSettingsTopComponent=This is a DeltaSettings window"
})
public final class DeltaSettingsTopComponent extends TopComponent implements DmxChangeListener, LookupListener {

    private static final long serialVersionUID = 395785282737331L;

    private Lookup.Result<FlowNode> result = null;

    //private final DeltaWidgetPanel widgetPanel = new DeltaWidgetPanel(0);
    private final DeltaWidgetPanel widgetPanel = new DeltaWidgetPanel(null);

    private final RGBPanel rgbPanel = new RGBPanel(0);
    private final HeadingPanel headingPanel = new HeadingPanel();

    private int universeID;
    private Universe universe;
    private int baseChannel;

    public DeltaSettingsTopComponent() {
        initComponents();
        setName(Bundle.CTL_DeltaSettingsTopComponent());
        setToolTipText(Bundle.HINT_DeltaSettingsTopComponent());
        initWidgets();

        // Todo: tap into loolup to set the universe and base channel for
        // the currently selected delta.
        //setUniverse(0);
        //setBaseChannel(0);
    }

    void setUniverse(int u) {
        this.universeID = u;
        if (u >= 0) {
//            this.universe = Universe.getUniverse(universeID);
            widgetPanel.setEnabled(true);
        } else {
            this.universe = null;
            widgetPanel.setEnabled(false);
        }
        headingPanel.setUniverse(u);
        widgetPanel.reset();
        rgbPanel.reset();
    }

    public void setBaseChannel(int i) {
        this.baseChannel = i;
        headingPanel.setBaseAddress(i);
    }

    private void initWidgets() {
        settingsPanel.add(headingPanel);
        settingsPanel.add(widgetPanel);
        settingsPanel.add(rgbPanel);
        settingsPanel.add(Box.createVerticalGlue());

        widgetPanel.addChangeListener(this);
        rgbPanel.addChangeListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        settingsPanel = new javax.swing.JPanel();

        settingsPanel.setLayout(new javax.swing.BoxLayout(settingsPanel, javax.swing.BoxLayout.Y_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel settingsPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(FlowNode.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void stateChanged(DmxChannelEvent e) {
        if (universe != null) {
            if (e.hasEvents()) {
                for (DmxChannelEvent ev : e.getEvents()) {
                    universe.write(baseChannel + ev.getOffset(), ev.getValue());
                }
            } else {
                // Single data
                universe.write(baseChannel + e.getOffset(), e.getValue());
            }
        }
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Lookup.Result<?> res = (Lookup.Result<?>) ev.getSource();

        Collection<?> instances = res.allInstances();

        if (!instances.isEmpty()) {
            Iterator<?> it = instances.iterator();
            while (it.hasNext()) {
                Object o = it.next();
                if (o instanceof DmxElement) {//you might wan to use this â€“ better safe than sorry, check if you got what you expected!
                    DmxElement e = (DmxElement) o; //If not sure if this will always be the case, use an if( instanceof ) here!
                    setUniverse(e.getUniverse());
                    setBaseChannel(e.getBaseChannel());
                    // Update Widget
                }
            }
        } else {
            setUniverse(-1);
        }
    }
}
