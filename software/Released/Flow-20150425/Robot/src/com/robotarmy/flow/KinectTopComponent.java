/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.robotarmy.flow;

import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.robotarmy.flow//Kinect//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "KinectTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.robotarmy.flow.KinectTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_KinectAction",
        preferredID = "KinectTopComponent"
)
@Messages({
    "CTL_KinectAction=Kinect",
    "CTL_KinectTopComponent=Kinect Window",
    "HINT_KinectTopComponent=This is a Kinect window"
})
@SuppressWarnings("serial")
public final class KinectTopComponent extends TopComponent {

    private ProcessingPanel processing;
    

    public KinectTopComponent() {
        initComponents();
        setName(Bundle.CTL_KinectTopComponent());
        setToolTipText(Bundle.HINT_KinectTopComponent());

        //setLayout(new FlowLayout());
        initKinect();
    }

    private void initKinect() {
        processing = new ProcessingPanel();
        //processing.setPreferredSize(new Dimension(1024,768));
        thePanel.add(processing);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        thePanel = new javax.swing.JPanel();

        setLayout(new java.awt.GridLayout(1, 1));

        thePanel.setBackground(new java.awt.Color(255, 0, 102));
        thePanel.setLayout(new java.awt.GridLayout());
        add(thePanel);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel thePanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        processing.init();              
    }

    @Override
    public void componentClosed() {
        processing.noLoop();
        processing.stop();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void addKinectListener(KinectListener aThis) {
        processing.addKinectListener(aThis);
    }
}
