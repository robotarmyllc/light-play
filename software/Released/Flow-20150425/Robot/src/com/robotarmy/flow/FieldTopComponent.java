/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.robotarmy.flow;

import com.robotarmy.flow.object.PaletteObject;
import com.robotarmy.flow.project.Project;
import com.robotarmy.flow.project.ProjectChangeEvent;
import com.robotarmy.flow.project.ProjectListener;
import com.robotarmy.flow.widget.FieldPanel;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.robotarmy.flow//Field//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FieldTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.robotarmy.flow.FieldTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FieldAction",
        preferredID = "FieldTopComponent"
)
@Messages({
    "CTL_FieldAction=Field",
    "CTL_FieldTopComponent=Field Window",
    "HINT_FieldTopComponent=Chicken!"
})
public final class FieldTopComponent extends TopComponent implements ChangeListener, LookupListener, ProjectListener {

    private static final Logger LOG = Logger.getLogger("FieldTopComponent");

    private final InstanceContent myLookup = new InstanceContent();
    private Lookup.Result<FlowDataObject> projectLookupResult = null;

    //private final FieldPanel field = new FieldPanel();

//    private AFlowObject flowObject = new AFlowObject(null) {
//    };

    //private Project project = null;

    public FieldTopComponent() {
        LOG.setLevel(Level.FINEST);
        
        associateLookup(new AbstractLookup(myLookup));
        initComponents();
        setName(Bundle.CTL_FieldTopComponent());
        setToolTipText(Bundle.HINT_FieldTopComponent());
        addNodeButton.setEnabled(false);
        //scrollPane.setViewportView(field);
        
        //field.addChangeListener(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The myLookup of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tools = new javax.swing.JPanel();
        projectLabel = new javax.swing.JLabel();
        addNodeButton = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();

        tools.setPreferredSize(new java.awt.Dimension(0, 32));

        org.openide.awt.Mnemonics.setLocalizedText(projectLabel, org.openide.util.NbBundle.getMessage(FieldTopComponent.class, "FieldTopComponent.projectLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(addNodeButton, org.openide.util.NbBundle.getMessage(FieldTopComponent.class, "FieldTopComponent.addNodeButton.text")); // NOI18N
        addNodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNodeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout toolsLayout = new javax.swing.GroupLayout(tools);
        tools.setLayout(toolsLayout);
        toolsLayout.setHorizontalGroup(
            toolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(projectLabel)
                .addGap(18, 18, 18)
                .addComponent(addNodeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        toolsLayout.setVerticalGroup(
            toolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(toolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectLabel)
                    .addComponent(addNodeButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tools, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(tools, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addNodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNodeButtonActionPerformed
        PaletteObject paletteObject = new PaletteObject(getProject().getRoot());

    }//GEN-LAST:event_addNodeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNodeButton;
    private javax.swing.JLabel projectLabel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JPanel tools;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // Listen to Project.class events.
        // We mainly want to know when a project was opened so that we
        // can open this window at the same time.
        if (projectLookupResult == null) {
            projectLookupResult = Utilities.actionsGlobalContext().lookupResult(FlowDataObject.class);
            projectLookupResult.addLookupListener(this);
        }

        // Close if there are no projects loaded.
        if (projectLookupResult.allItems().isEmpty()) {
            LOG.log(Level.CONFIG, "No project seems to be loaded.\n");
        } else {
            LOG.log(Level.CONFIG, "A project is loaded.\n");
            //openLoggingTab();
            // Pretend that we just had a lookup event.
            resultChanged(new LookupEvent(projectLookupResult));
        }
    }

    @Override
    public void componentClosed() {
        // We need to stop watching for lookup changes if the user closes
        // the project rendering window.
        projectLookupResult.removeLookupListener(this);
        projectLookupResult = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof FieldPanel) {
            LOG.finest("stateChanged in FieldPanel");
            FieldPanel p = (FieldPanel) e.getSource();
            //myLookup.set(Collections.singleton(p.getSelectedElement()), null);
            //myLookup.add(flowObject);
        }
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Collection<? extends FlowDataObject> allEvents = projectLookupResult.allInstances();
        if (!allEvents.isEmpty()) {
            LOG.finest("FieldTopComponent: Setting Project");
            setProject( allEvents.iterator().next().getProject() );
        } else {
            Project p = getProject();
            if (p != null  && !p.isOpen()) {
                // The user may have closed the project.
                //p.removeListener(this);
                setProject(null);
                LOG.finest("FieldTopComponent: Project was closed.");
                return;
            }
            if (p == null) {
                // If Collection is empty, set project null
                LOG.finest("FieldTopComponent: Project NULL");
                //setProject(null);
                return;
            }
            if (!p.isOpen()) {
                // If Collection is empty, set project null
                LOG.finest("FieldTopComponent: Project closed");
                setProject(null);
            }
        }
    }

    public Project getProject() {
        return getLookup().lookup(Project.class);
    }

    /**
     * @param p the p to set
     */
    protected void setProject(Project p) {
    
        // Only act if the p actually changed.
        if (p == getProject()) {
            return;
        }

        // Remove old p from lookup
        if (getProject() != null) {
            getProject().removeListener(this);
            myLookup.remove(getProject());
            addNodeButton.setEnabled(false);
            LOG.finest("Project Set to NULL.");
        }

        if (p != null) {
            // Add the new p to the lookup.
            myLookup.add(p);
            p.addListener(this);
            //myLookup.add(p.getDataObject());

            addNodeButton.setEnabled(true);
            LOG.log(Level.FINEST, "Set project to : {0}", p.toString());

            //SHIP ship = getProject().getLookup().lookup(SHIP.class);
            // The layoutObject needs to be in the TopComponent's lookup
            // so that the root node actions AddAction menu populate properly.
            //myLookup.add(p.getLayout());
        }

        projectLabel.setText("Project: " + getProject().getName());
        updateTabTitle();
    }

    @Override
    public void projectChanged(ProjectChangeEvent e) {
        LOG.fine("Project Changed.");
        updateTabTitle();
//        switch (e.getType()) {
//            case DATA_CHANGED:
//                LOG.finest("FieldTopComponent: DATA_CHANGED");
//                modify();
//                break;
//        }
    }

    private void updateTabTitle() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                String tabName = Bundle.CTL_FieldTopComponent();
                Project project = getProject();

                if (project != null) {
                    setName(tabName + " -- " + project.getName());
                } else {
                    setName(tabName);
                }

                if (project != null && project.isEdited()) {
                    setHtmlDisplayName("<html><font color=#FF0000>" + getName() + "</font></html>");
                } else {
                    setHtmlDisplayName(null); // Setting to null defaults name to getName();
                }
                repaint();
            }
        });
    }

}
