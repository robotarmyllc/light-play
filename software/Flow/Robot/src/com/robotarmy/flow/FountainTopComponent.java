/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.robotarmy.flow;

import com.robotarmy.dmx.Universe;
import com.robotarmy.flow.fountain.FountainCell;
import com.robotarmy.flow.fountain.FountainModel;
import com.robotarmy.flow.fountain.FountainPanel;
import com.robotarmy.flow.fountain.FountainRobot;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.robotarmy.flow//Fountain//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FountainTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "navigator", openAtStartup = true)
@ActionID(category = "Window", id = "com.robotarmy.flow.FountainTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FountainAction",
        preferredID = "FountainTopComponent"
)
@Messages({
    "CTL_FountainAction=Fountain",
    "CTL_FountainTopComponent=Fountain Window",
    "HINT_FountainTopComponent=This is a Fountain window"
})

@SuppressWarnings("serial")
public final class FountainTopComponent extends TopComponent implements ActionListener {

    private final FountainPanel fountainPanel = new FountainPanel();
    private Universe universe;
    private final List<FountainRobot> robots = new ArrayList<>();
    
    public FountainTopComponent() {
        initComponents();
        setName(Bundle.CTL_FountainTopComponent());
        setToolTipText(Bundle.HINT_FountainTopComponent());

        add( fountainPanel );
        
        robots.add(new FountainRobot( 1, 6, 12));
        robots.add(new FountainRobot( 2, 7, 14));
        robots.add(new FountainRobot( 3, 6, 16));
        robots.add(new FountainRobot( 4, 3, 16));
        robots.add(new FountainRobot( 5, 2, 14));
        robots.add(new FountainRobot( 6, 3, 12));
        robots.add(new FountainRobot( 7, 4, 14));

        robots.add(new FountainRobot( 8, 12,  9));
        robots.add(new FountainRobot( 9, 13, 11));
        robots.add(new FountainRobot(10, 12, 13));
        robots.add(new FountainRobot(11,  9, 13));
        robots.add(new FountainRobot(12,  8, 11));
        robots.add(new FountainRobot(13,  9,  9));
        robots.add(new FountainRobot(14, 10, 11));

        robots.add(new FountainRobot(15, 20, 9));
        robots.add(new FountainRobot(16, 21, 11));
        robots.add(new FountainRobot(17, 20, 13));
        robots.add(new FountainRobot(18, 17, 13));
        robots.add(new FountainRobot(19, 16, 11));
        robots.add(new FountainRobot(20, 17, 9));
        robots.add(new FountainRobot(21, 19, 11));

        robots.add(new FountainRobot(22, 26, 12));
        robots.add(new FountainRobot(23, 27, 14));
        robots.add(new FountainRobot(24, 26, 16));
        robots.add(new FountainRobot(25, 23, 16));
        robots.add(new FountainRobot(26, 22, 14));
        robots.add(new FountainRobot(27, 23, 12));
        robots.add(new FountainRobot(28, 24, 14));

        robots.add(new FountainRobot(29, 20, 15));
        robots.add(new FountainRobot(30, 21, 17));
        robots.add(new FountainRobot(31, 20, 19));
        robots.add(new FountainRobot(32, 17, 19));
        robots.add(new FountainRobot(33, 16, 17));
        robots.add(new FountainRobot(34, 17, 15));
        robots.add(new FountainRobot(35, 18, 17));

        robots.add(new FountainRobot(36, 12, 15));
        robots.add(new FountainRobot(37, 13, 17));
        robots.add(new FountainRobot(38, 12, 19));
        robots.add(new FountainRobot(39,  9, 19));
        robots.add(new FountainRobot(40,  8, 17));
        robots.add(new FountainRobot(41,  9, 15));
        robots.add(new FountainRobot(42, 10, 17));

        universe = Universe.getUniverse(0);
        
        fountainPanel.getModel().addActionListener(this);
        
        fountainPanel.setRobots(robots);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        Logger.getGlobal().warning("Component Opened.");
        KinectTopComponent kinectTc = (KinectTopComponent) WindowManager.getDefault().findTopComponent("KinectTopComponent");
        if ( kinectTc != null ) {
            kinectTc.addKinectListener(fountainPanel);
        } else {
            Logger.getGlobal().warning("Could not register Fountain to Kinect!");
        }
    }

    @Override
    public void componentClosed() {
        
        // TODO Remove kinect listener
        
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    /**
     * @return the fountainPanel
     */
    public FountainPanel getFountainPanel() {
        return fountainPanel;
    }

    /**
     * The model has changed.
     * @param e 
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        FountainModel m = (FountainModel) e.getSource();
        
        // Map a cell to a delta.
        //FountainCell cell = m.getCell(5,5);
//        universe.write(12, 
//                cell.getX(), cell.getY(), cell.getZ(), 
//                cell.getX(), cell.getY(), cell.getZ());
        
        for ( FountainRobot r: robots ) {
            FountainCell cell = m.getCell(r.getX(),r.getY());
            universe.write(r.getAddr()*6, 
                cell.getX(), cell.getY(), cell.getZ(), 
                cell.getX(), cell.getY(), cell.getZ()  );
        }
    }
}
